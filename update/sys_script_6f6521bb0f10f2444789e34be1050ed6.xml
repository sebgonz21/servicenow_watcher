<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_kasp_watcher_watcher_events</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Get Logs 2</name>
        <onclick/>
        <order>100</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	if(current == null || current.getValue('type').indexOf("get_log") != 0){
		return;
	}
	
	var event_type = current.getValue('type');
	
	//gs.info("Running async rule " +current.server);
	var monitor = new GlideRecord('x_kasp_watcher_monitors');
	monitor.get(current.getValue('monitor'));
	
	var server = monitor.getValue('server');
	
	var filePath = current.getValue('type');
	filePath = filePath.split('@');
	filePath = filePath[1];
	
	var pathArr = filePath.split('/');
	var logFile = pathArr[pathArr.length - 1];
	
	var part;
	filePath = '';
	
	for(var i = 0; i < pathArr.length - 1; i++){
		part = pathArr[i];
		filePath += part + '%2F';
	}
	filePath += logFile;

	
	//gs.info("FILE PATH " + filePath);
	
	var today = new GlideDateTime();
	var newDate = today.getLocalDate();
	
	
	var addLogLines = function(log_arr){
		//gs.info('Adding logs for ' + server);
		
		var writeLog = function(logs, index){
			var lineArray;
			var timestamp;
			var logLine;
			var newLog;
			
			for(var i = index; i < logs.length; i++){
				
				lineArray = logs[i].split(" ");
				timestamp = lineArray[0] + " " + lineArray[1];
				logLine = logs[i].substring(timestamp.length + 1);
				logLine = logLine.trim();
				
				if(logLine.length > 0 && logLine != "" && logLine != " " && logLine != null){
					newLog = new GlideRecord('x_kasp_watcher_server_logs');
					newLog.setValue('server',server);
					newLog.setValue('log_file',logFile);
					newLog.setValue('timestamp',timestamp);
					newLog.setValue('log_line',logLine);
					newLog.insert();
				}
				
			}
		};
		var first_line = log_arr[0].split(" ");
		var log_date = first_line[0];
		
		
		var old_log = new GlideRecord('x_kasp_watcher_server_logs');
		old_log.addQuery('server',server);
		old_log.addQuery('log_file',logFile);
		old_log.addQuery('timestamp','STARTSWITH',log_date);
		old_log.query();
		
		var lineCount = 0;
		
		if(old_log.hasNext()){
			while(old_log.next()){
				
				lineCount++;
			}
			
			writeLog(log_arr,lineCount);
		}else{
			writeLog(log_arr,0);
		}
		
	};
	
	try{
		
		var logs = new GlideRecord('x_kasp_watcher_server_logs');
		logs.addQuery('server',server);
		logs.addQuery('timestamp','STARTSWITH',newDate);
		logs.orderBy('timestamp');
		logs.query();
		
		while(logs.hasNext()){
			logs.next();
		}
		
		var last_line = logs.getValue('timestamp') + ' ' + logs.getValue('log_line');
		
		if(logs.getValue('timestamp') == null || logs.getValue('log_line') == null){
			last_line = "no_last_line";
		}
		
		var rest = new sn_ws.RESTMessageV2();
		rest.setHttpMethod("get");
		
		var endpoint = "http://vsecsntools1.katespade.net:9999/application=watcher/query=server=";
		endpoint += server;
		endpoint += "%5E";
		endpoint += "command=logs";
		endpoint += "%5E";
		endpoint += "params=";
		endpoint += "file_path="+filePath;
		
		//gs.info("Watcher2 Getting Logs for " + server + " endpoint " + endpoint);
		for(var a = 0; a < endpoint.length; a++){
			if(endpoint[a] == ' '){
				endpoint = endpoint.substring(0,a) + '%20' + endpoint.substring(a+1);
			}
		}
		
		rest.setEndpoint(endpoint);
		rest.setMIDServer('ProdMidServer2');
		rest.setHttpTimeout(10000);
		
		var response = rest.execute();
		response.waitForResponse(10);
		
		if(response.haveError()){
			gs.info("Error getting logs for " + server);
			gs.info("Error "+response.getErrorCode() + " " + response.getErrorMessage());
			gs.info("status " + response.getStatusCode());
		}else{
			if(response.getBody() != null){
				//gs.info('LOGS for ' + server);
				//gs.info(response.getBody());
				var valArr = response.getBody().split("\n");
				addLogLines(valArr);
			
			}else{
				gs.info("Watcher2 NO ERROR Getting Logs for " + server + " BUT Response is NULL");
			}
			
		}
		
	}catch(err){
		
		gs.info("Watcher2 Error getting logs for " + server + " " + err);
		
	}
	
	current.deleteRecord();
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>sebgar01</sys_created_by>
        <sys_created_on>2017-01-20 15:19:36</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>6f6521bb0f10f2444789e34be1050ed6</sys_id>
        <sys_mod_count>92</sys_mod_count>
        <sys_name>Get Logs 2</sys_name>
        <sys_overrides/>
        <sys_package display_value="Watcher" source="x_kasp_watcher">8eb44d282bad620045eeaacc17da152f</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Watcher">8eb44d282bad620045eeaacc17da152f</sys_scope>
        <sys_update_name>sys_script_6f6521bb0f10f2444789e34be1050ed6</sys_update_name>
        <sys_updated_by>sebgar01</sys_updated_by>
        <sys_updated_on>2017-03-16 17:20:35</sys_updated_on>
        <template/>
        <when>async</when>
    </sys_script>
</record_update>
